- if params[:action] == 'feed'
  %h1 Company Information
  %dt Participant since
  %dd
    %ul
      %li= communication_on_progress.organization.joined_on
  %dt Country
  %dd
    %ul
      %li= communication_on_progress.organization.country_name
  %dt Ownership
  %dd
    %ul
      %li
        = communication_on_progress.organization.is_ft_500 ? 'FT 500' : nil
        = communication_on_progress.organization.listing_status_name
  - unless communication_on_progress.organization.stock_symbol.blank? || communication_on_progress.organization.exchange.blank?
    %dt Stock Information
    %dd
      %ul
        %li
          == #{communication_on_progress.organization.exchange.name} (#{communication_on_progress.organization.stock_symbol})
          
  %dt Sector
  %dd
    %ul
      %li= communication_on_progress.organization.sector_name
  
%dt Time period
%dd
  %ul
    %li= date_range(communication_on_progress)

- if communication_on_progress.cop_files.any?
  %dt Files
  %dd
    %ul
      - for cop_file in communication_on_progress.cop_files
        %li
          = link_to truncate(cop_file.attachment_file_name, :length => 60), cop_file.attachment.url
          == (#{cop_file.language.name})
- if communication_on_progress.cop_links.any?
  %dt Links
  %dd
    %ul
      - for cop_link in communication_on_progress.cop_links
        %li
          = link_to truncate(cop_link.url, :length => 60), cop_link.url
          == (#{cop_link.language.name})

- unless communication_on_progress.is_grace_letter?
  %dt Format
  %dd
    %ul
      %li= CommunicationOnProgress::FORMAT[communication_on_progress.format.try(:to_sym)]

  %dt Self-assessment
  %dd
    %ul
      - unless communication_on_progress.include_continued_support_statement? || communication_on_progress.include_measurement?
        %li The participant did not provide a self-assessment of the COP's content
      - if communication_on_progress.include_continued_support_statement?
        %li Includes an explicit statement of continued support for the UN Global Compact and its ten principles
      - if communication_on_progress.include_measurement?
        %li Identifies targets, define performance indicators and measure outcomes
      - if communication_on_progress.issue_areas_covered.count > 0
        %li== Issue areas covered: #{communication_on_progress.issue_areas_covered.join(', ')}
    
/ - if communication_on_progress.is_advanced_programme?
/   %dt Advanced Programme
/   %dd
/     %ul
/       %li This company has elected to participate in the Advanced Programme by completing a self-assessment questionnaire covering the content of their COP and assessing their implementation of the Global Compact principles against global best practices.

/ - if logged_in? || params[:action] == 'feed'

- if communication_on_progress.additional_questions?
  %dt
    Issue Area Coverage
    %br
    (self-assessed)
  %dd
    %ul
      %li
        %div{:id => 'issue_coverage'}
          - PrincipleArea::FILTERS.each_pair do |key, value|
            - percent = percent_issue_area_coverage(communication_on_progress, key)
            - if communication_on_progress.send("references_#{key}?") && percent > 0
              %span{:class => "#{issue_area_colour_for(value)}" }
                %strong= value
              %div{:class => 'ui-progressbar ui-widget ui-widget-content ui-corner-all', :title => "Issue area coverage for #{value}"}
                %div{:style => "width: #{percent}%;", :class => "ui-progressbar-value ui-widget-header ui-corner-left ui-widget-header-#{issue_area_colour_for(value)}"}
                  %div{:class => 'ui-progressbar-text'}
                    == #{percent}%
          - PrincipleArea::FILTERS.each_pair do |key, value|
            - percent = percent_issue_area_coverage(communication_on_progress, key)
            - if communication_on_progress.send("references_#{key}?") && percent < 1
              %li== No reported coverage for #{value}

- PrincipleArea::FILTERS.each_pair do |key, value|
  - if communication_on_progress.send("references_#{key}?") && (communication_on_progress.notable_program? || communication_on_progress.additional_questions?)
    %dt
      %span{:class => "#{issue_area_colour_for(value)}" }
        = value + '<br />' + show_issue_area_coverage(communication_on_progress, key)
    %dd= show_cop_attributes(communication_on_progress, PrincipleArea.send(key).id, communication_on_progress.send("references_#{key}?"), 'additional')
    
- if communication_on_progress.cop_answers.by_group(:governance).count > 0
  %dt Governance
  %dd= show_cop_attributes(communication_on_progress, nil, nil, 'governance')
  
- if communication_on_progress.cop_answers.by_group(:strategy_governance).count > 0
  %dt
    Strategy and <br /> Governance <br />
  %dd= show_cop_attributes(communication_on_progress, nil, nil, 'strategy_governance')

- if communication_on_progress.cop_answers.by_group(:transparency_disclosure).count > 0
  %dt Transparency <br /> and Disclosure
  %dd= show_cop_attributes(communication_on_progress, nil, nil, 'transparency_disclosure')

- if communication_on_progress.cop_answers.by_group(:un_goals).count > 0
  %dt UN Goals and Issues
  %dd= show_cop_attributes(communication_on_progress, nil, nil, 'un_goals')