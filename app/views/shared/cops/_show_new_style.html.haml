- if params[:action] == 'feed'
  %h1 Company Information
  %dt Participant since
  %dd
    %ul
      %li= communication_on_progress.organization.joined_on
  %dt Country
  %dd
    %ul
      %li= communication_on_progress.organization.country_name
  %dt Ownership
  %dd
    %ul
      %li
        = communication_on_progress.organization.is_ft_500 ? 'FT 500' : nil
        = communication_on_progress.organization.listing_status_name
  %dt Sector
  %dd
    %ul
      %li= communication_on_progress.organization.sector_name
  
  %h1 COP Details
      
%dt Time period
%dd
  %ul
    %li== #{communication_on_progress.starts_on.month}/#{communication_on_progress.starts_on.year} to #{communication_on_progress.ends_on.month}/#{communication_on_progress.ends_on.year}

- if communication_on_progress.cop_files.any?
  %dt Files
  %dd
    %ul
      - for cop_file in communication_on_progress.cop_files
        %li
          = link_to cop_file.attachment_file_name, cop_file.attachment.url
          == (#{cop_file.language.name})
- if communication_on_progress.cop_links.any?
  %dt Links
  %dd
    %ul
      - for cop_link in communication_on_progress.cop_links
        %li
          = link_to truncate(cop_link.url, :length => 60), cop_link.url
          == [#{cop_link.language.name}]

%dt Format
%dd
  %ul
    %li= CommunicationOnProgress::FORMAT[communication_on_progress.format.try(:to_sym)]

%dt Content
%dd
  %ul
    - unless communication_on_progress.include_continued_support_statement? || communication_on_progress.include_measurement?
      %li The participant did not provide a self-assessment of the COP's content
    - if communication_on_progress.include_continued_support_statement?
      %li Includes an explicit statement of continued support for the UN Global Compact and its ten principles
    - if communication_on_progress.include_measurement?
      %li Identifies targets, define performance indicators and measure outcomes
    - if communication_on_progress.issue_areas_covered.count > 0
      %li== Issue areas covered: #{communication_on_progress.issue_areas_covered.join(', ')}
    
/ - if logged_in? || params[:action] == 'feed'


%div
  %dt Issue Area Coverage
  %dd
    %ul
      %li
        %div{:id => 'issue_coverage'}
          - PrincipleArea::FILTERS.each_pair do |key, value|
            %div{:class => 'ui-progressbar ui-widget ui-widget-content ui-corner-all', :title => "Issue area coverage for #{value}"}
              %div{:style => "width: #{percent_issue_area_coverage(communication_on_progress, key)}%;", :class => "ui-progressbar-value ui-widget-header ui-corner-left ui-widget-header-#{issue_area_colour_for(value)}"}
                %div{:style => 'color: #fff; font-size: 10px; font-weight:bold; margin: 4px 0 0 5px;'}
                  == #{value}
                  == #{percent_issue_area_coverage(communication_on_progress, key)}%

- PrincipleArea::FILTERS.each_pair do |key, value|
  - if communication_on_progress.send("references_#{key}?") && (communication_on_progress.notable_program? || communication_on_progress.additional_questions?)
    %dt
      %span{:class => "#{issue_area_colour_for(value)}" }
        == #{value} <br /> #{show_issue_area_coverage(communication_on_progress, key)}
    %dd
      %ul= show_cop_attributes(communication_on_progress, PrincipleArea.send(key).id, communication_on_progress.send("references_#{key}?"), 'additional')

- if communication_on_progress.notable_program?
  %dt Notable Program
  %dd
    %ul= show_cop_attributes(communication_on_progress, nil, nil, 'notable')
    
- if communication_on_progress.cop_answers.by_group(:governance).count > 0
  %dt Governance
  %dd
    %ul= show_cop_attributes(communication_on_progress, nil, nil, 'governance')